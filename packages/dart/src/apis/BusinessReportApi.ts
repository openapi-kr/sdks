/* tslint:disable */
/* eslint-disable */
/**
 * DART
 * DART에 공시되고있는 공시보고서 원문 등을 오픈API를 통해 활용할 수 있습니다. 활용을 원하시는 누구든지(개인, 기업, 기관 등) 이용하실 수 있습니다.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opendart@fss.or.kr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccnutAdtorNmNdAdtOpinionResponse,
  AccnutAdtorNonAdtServcCnclsSttusResponse,
  AdtServcCnclsSttusResponse,
  AlotMatterResponse,
  CndlCaplScritsNrdmpBlceResponse,
  CprndNrdmpBlceResponse,
  DetScritsIsuAcmsltResponse,
  DrctrAdtAllMendngSttusGmtsckConfmAmountResponse,
  DrctrAdtAllMendngSttusMendngPymntamtTyClResponse,
  EmpSttusResponse,
  EntrprsBilScritsNrdmpBlceResponse,
  ExctvSttusResponse,
  HmvAuditAllSttusResponse,
  HmvAuditIndvdlBySttusResponse,
  HyslrChgSttusResponse,
  HyslrSttusResponse,
  IndvdlByPayResponse,
  IrdsSttusResponse,
  MrhlSttusResponse,
  NewCaplScritsNrdmpBlceResponse,
  OtrCprInvstmntSttusResponse,
  OutcmpnyDrctrNdChangeSttusResponse,
  PrvsrpCptalUseDtlsResponse,
  PssrpCptalUseDtlsResponse,
  SrtpdPsndbtNrdmpBlceResponse,
  StockTotqySttusResponse,
  TesstkAcqsDspsSttusResponse,
  UnrstExctvMendngSttusResponse,
} from '../models';

export interface AccnutAdtorNmNdAdtOpinionRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: AccnutAdtorNmNdAdtOpinionReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface AccnutAdtorNonAdtServcCnclsSttusRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: AccnutAdtorNonAdtServcCnclsSttusReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface AdtServcCnclsSttusRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: AdtServcCnclsSttusReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface AlotMatterRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: AlotMatterReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface CndlCaplScritsNrdmpBlceRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 사업연도(4자리)
     */
    bsnsYear: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: CndlCaplScritsNrdmpBlceReprtCodeEnum;
}

export interface CprndNrdmpBlceRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: CprndNrdmpBlceReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface DetScritsIsuAcmsltRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: DetScritsIsuAcmsltReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface DrctrAdtAllMendngSttusGmtsckConfmAmountRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: DrctrAdtAllMendngSttusGmtsckConfmAmountReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface DrctrAdtAllMendngSttusMendngPymntamtTyClRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: DrctrAdtAllMendngSttusMendngPymntamtTyClReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface EmpSttusRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: EmpSttusReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface EntrprsBilScritsNrdmpBlceRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: EntrprsBilScritsNrdmpBlceReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface ExctvSttusRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: ExctvSttusReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface HmvAuditAllSttusRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: HmvAuditAllSttusReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface HmvAuditIndvdlBySttusRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: HmvAuditIndvdlBySttusReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface HyslrChgSttusRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: HyslrChgSttusReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface HyslrSttusRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: HyslrSttusReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface IndvdlByPayRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: IndvdlByPayReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface IrdsSttusRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: IrdsSttusReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface MrhlSttusRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: MrhlSttusReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface NewCaplScritsNrdmpBlceRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: NewCaplScritsNrdmpBlceReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface OtrCprInvstmntSttusRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: OtrCprInvstmntSttusReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface OutcmpnyDrctrNdChangeSttusRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: OutcmpnyDrctrNdChangeSttusReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface PrvsrpCptalUseDtlsRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: PrvsrpCptalUseDtlsReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface PssrpCptalUseDtlsRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: PssrpCptalUseDtlsReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface SrtpdPsndbtNrdmpBlceRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: SrtpdPsndbtNrdmpBlceReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface StockTotqySttusRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: StockTotqySttusReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface TesstkAcqsDspsSttusRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: TesstkAcqsDspsSttusReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface UnrstExctvMendngSttusRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 사업연도(4자리)
     */
    bsnsYear: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: UnrstExctvMendngSttusReprtCodeEnum;
}

/**
 * 
 */
export class BusinessReportApi extends runtime.BaseAPI {

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 회계감사인의 명칭 및 감사의견을 제공합니다.
     * 
     */
    async accnutAdtorNmNdAdtOpinionRaw(requestParameters: AccnutAdtorNmNdAdtOpinionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccnutAdtorNmNdAdtOpinionResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling accnutAdtorNmNdAdtOpinion.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling accnutAdtorNmNdAdtOpinion.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling accnutAdtorNmNdAdtOpinion.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/accnutAdtorNmNdAdtOpinion.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 회계감사인의 명칭 및 감사의견을 제공합니다.
     * 
     */
    async accnutAdtorNmNdAdtOpinion(requestParameters: AccnutAdtorNmNdAdtOpinionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccnutAdtorNmNdAdtOpinionResponse> {
        const response = await this.accnutAdtorNmNdAdtOpinionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 회계감사인과의 비감사용역 계약체결 현황을 제공합니다.
     * 
     */
    async accnutAdtorNonAdtServcCnclsSttusRaw(requestParameters: AccnutAdtorNonAdtServcCnclsSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccnutAdtorNonAdtServcCnclsSttusResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling accnutAdtorNonAdtServcCnclsSttus.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling accnutAdtorNonAdtServcCnclsSttus.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling accnutAdtorNonAdtServcCnclsSttus.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/accnutAdtorNonAdtServcCnclsSttus.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 회계감사인과의 비감사용역 계약체결 현황을 제공합니다.
     * 
     */
    async accnutAdtorNonAdtServcCnclsSttus(requestParameters: AccnutAdtorNonAdtServcCnclsSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccnutAdtorNonAdtServcCnclsSttusResponse> {
        const response = await this.accnutAdtorNonAdtServcCnclsSttusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 감사용역체결현황을 제공합니다.
     * 
     */
    async adtServcCnclsSttusRaw(requestParameters: AdtServcCnclsSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdtServcCnclsSttusResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling adtServcCnclsSttus.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling adtServcCnclsSttus.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling adtServcCnclsSttus.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/adtServcCnclsSttus.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 감사용역체결현황을 제공합니다.
     * 
     */
    async adtServcCnclsSttus(requestParameters: AdtServcCnclsSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdtServcCnclsSttusResponse> {
        const response = await this.adtServcCnclsSttusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 배당사항을 제공합니다.
     * 
     */
    async alotMatterRaw(requestParameters: AlotMatterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlotMatterResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling alotMatter.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling alotMatter.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling alotMatter.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/alotMatter.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 배당사항을 제공합니다.
     * 
     */
    async alotMatter(requestParameters: AlotMatterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlotMatterResponse> {
        const response = await this.alotMatterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 조건부 자본증권 미상환 잔액을 제공합니다.
     * 
     */
    async cndlCaplScritsNrdmpBlceRaw(requestParameters: CndlCaplScritsNrdmpBlceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CndlCaplScritsNrdmpBlceResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling cndlCaplScritsNrdmpBlce.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling cndlCaplScritsNrdmpBlce.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling cndlCaplScritsNrdmpBlce.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/cndlCaplScritsNrdmpBlce.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 조건부 자본증권 미상환 잔액을 제공합니다.
     * 
     */
    async cndlCaplScritsNrdmpBlce(requestParameters: CndlCaplScritsNrdmpBlceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CndlCaplScritsNrdmpBlceResponse> {
        const response = await this.cndlCaplScritsNrdmpBlceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 회사채 미상환 잔액을 제공합니다.
     * 
     */
    async cprndNrdmpBlceRaw(requestParameters: CprndNrdmpBlceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CprndNrdmpBlceResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling cprndNrdmpBlce.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling cprndNrdmpBlce.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling cprndNrdmpBlce.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/cprndNrdmpBlce.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 회사채 미상환 잔액을 제공합니다.
     * 
     */
    async cprndNrdmpBlce(requestParameters: CprndNrdmpBlceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CprndNrdmpBlceResponse> {
        const response = await this.cprndNrdmpBlceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 채무증권 발행실적을 제공합니다.
     * 
     */
    async detScritsIsuAcmsltRaw(requestParameters: DetScritsIsuAcmsltRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetScritsIsuAcmsltResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling detScritsIsuAcmslt.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling detScritsIsuAcmslt.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling detScritsIsuAcmslt.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/detScritsIsuAcmslt.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 채무증권 발행실적을 제공합니다.
     * 
     */
    async detScritsIsuAcmslt(requestParameters: DetScritsIsuAcmsltRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetScritsIsuAcmsltResponse> {
        const response = await this.detScritsIsuAcmsltRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 이사·감사 전체의 보수현황(주주총회 승인금액)을 제공합니다.
     * 
     */
    async drctrAdtAllMendngSttusGmtsckConfmAmountRaw(requestParameters: DrctrAdtAllMendngSttusGmtsckConfmAmountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DrctrAdtAllMendngSttusGmtsckConfmAmountResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling drctrAdtAllMendngSttusGmtsckConfmAmount.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling drctrAdtAllMendngSttusGmtsckConfmAmount.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling drctrAdtAllMendngSttusGmtsckConfmAmount.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/drctrAdtAllMendngSttusGmtsckConfmAmount.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 이사·감사 전체의 보수현황(주주총회 승인금액)을 제공합니다.
     * 
     */
    async drctrAdtAllMendngSttusGmtsckConfmAmount(requestParameters: DrctrAdtAllMendngSttusGmtsckConfmAmountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DrctrAdtAllMendngSttusGmtsckConfmAmountResponse> {
        const response = await this.drctrAdtAllMendngSttusGmtsckConfmAmountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 이사·감사 전체의 보수현황(보수지급금액 - 유형별)을 제공합니다.
     * 
     */
    async drctrAdtAllMendngSttusMendngPymntamtTyClRaw(requestParameters: DrctrAdtAllMendngSttusMendngPymntamtTyClRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DrctrAdtAllMendngSttusMendngPymntamtTyClResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling drctrAdtAllMendngSttusMendngPymntamtTyCl.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling drctrAdtAllMendngSttusMendngPymntamtTyCl.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling drctrAdtAllMendngSttusMendngPymntamtTyCl.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/drctrAdtAllMendngSttusMendngPymntamtTyCl.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 이사·감사 전체의 보수현황(보수지급금액 - 유형별)을 제공합니다.
     * 
     */
    async drctrAdtAllMendngSttusMendngPymntamtTyCl(requestParameters: DrctrAdtAllMendngSttusMendngPymntamtTyClRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DrctrAdtAllMendngSttusMendngPymntamtTyClResponse> {
        const response = await this.drctrAdtAllMendngSttusMendngPymntamtTyClRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 직원 현황을 제공합니다.
     * 
     */
    async empSttusRaw(requestParameters: EmpSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmpSttusResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling empSttus.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling empSttus.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling empSttus.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/empSttus.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 직원 현황을 제공합니다.
     * 
     */
    async empSttus(requestParameters: EmpSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmpSttusResponse> {
        const response = await this.empSttusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 기업어음증권 미상환 잔액을 제공합니다.
     * 
     */
    async entrprsBilScritsNrdmpBlceRaw(requestParameters: EntrprsBilScritsNrdmpBlceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntrprsBilScritsNrdmpBlceResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling entrprsBilScritsNrdmpBlce.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling entrprsBilScritsNrdmpBlce.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling entrprsBilScritsNrdmpBlce.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/entrprsBilScritsNrdmpBlce.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 기업어음증권 미상환 잔액을 제공합니다.
     * 
     */
    async entrprsBilScritsNrdmpBlce(requestParameters: EntrprsBilScritsNrdmpBlceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntrprsBilScritsNrdmpBlceResponse> {
        const response = await this.entrprsBilScritsNrdmpBlceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 임원 현황을 제공합니다.
     * 
     */
    async exctvSttusRaw(requestParameters: ExctvSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExctvSttusResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling exctvSttus.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling exctvSttus.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling exctvSttus.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/exctvSttus.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 임원 현황을 제공합니다.
     * 
     */
    async exctvSttus(requestParameters: ExctvSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExctvSttusResponse> {
        const response = await this.exctvSttusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 이사·감사 전체의 보수 현황을 제공합니다.
     * 
     */
    async hmvAuditAllSttusRaw(requestParameters: HmvAuditAllSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HmvAuditAllSttusResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling hmvAuditAllSttus.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling hmvAuditAllSttus.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling hmvAuditAllSttus.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/hmvAuditAllSttus.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 이사·감사 전체의 보수 현황을 제공합니다.
     * 
     */
    async hmvAuditAllSttus(requestParameters: HmvAuditAllSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HmvAuditAllSttusResponse> {
        const response = await this.hmvAuditAllSttusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 이사·감사의 개인별 보수 현황을 제공합니다.
     * 
     */
    async hmvAuditIndvdlBySttusRaw(requestParameters: HmvAuditIndvdlBySttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HmvAuditIndvdlBySttusResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling hmvAuditIndvdlBySttus.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling hmvAuditIndvdlBySttus.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling hmvAuditIndvdlBySttus.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/hmvAuditIndvdlBySttus.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 이사·감사의 개인별 보수 현황을 제공합니다.
     * 
     */
    async hmvAuditIndvdlBySttus(requestParameters: HmvAuditIndvdlBySttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HmvAuditIndvdlBySttusResponse> {
        const response = await this.hmvAuditIndvdlBySttusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 최대주주 변동현황을 제공합니다.
     * 
     */
    async hyslrChgSttusRaw(requestParameters: HyslrChgSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HyslrChgSttusResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling hyslrChgSttus.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling hyslrChgSttus.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling hyslrChgSttus.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/hyslrChgSttus.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 최대주주 변동현황을 제공합니다.
     * 
     */
    async hyslrChgSttus(requestParameters: HyslrChgSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HyslrChgSttusResponse> {
        const response = await this.hyslrChgSttusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 최대주주 현황을 제공합니다.
     * 
     */
    async hyslrSttusRaw(requestParameters: HyslrSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HyslrSttusResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling hyslrSttus.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling hyslrSttus.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling hyslrSttus.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/hyslrSttus.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 최대주주 현황을 제공합니다.
     * 
     */
    async hyslrSttus(requestParameters: HyslrSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HyslrSttusResponse> {
        const response = await this.hyslrSttusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 개인별 보수지급 금액(5억이상 상위5인)을 제공합니다.
     * 
     */
    async indvdlByPayRaw(requestParameters: IndvdlByPayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndvdlByPayResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling indvdlByPay.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling indvdlByPay.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling indvdlByPay.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/indvdlByPay.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 개인별 보수지급 금액(5억이상 상위5인)을 제공합니다.
     * 
     */
    async indvdlByPay(requestParameters: IndvdlByPayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndvdlByPayResponse> {
        const response = await this.indvdlByPayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 증자(감자) 현황을 제공합니다.
     * 
     */
    async irdsSttusRaw(requestParameters: IrdsSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IrdsSttusResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling irdsSttus.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling irdsSttus.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling irdsSttus.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/irdsSttus.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 증자(감자) 현황을 제공합니다.
     * 
     */
    async irdsSttus(requestParameters: IrdsSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IrdsSttusResponse> {
        const response = await this.irdsSttusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 소액주주 현황을 제공합니다.
     * 
     */
    async mrhlSttusRaw(requestParameters: MrhlSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MrhlSttusResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling mrhlSttus.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling mrhlSttus.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling mrhlSttus.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/mrhlSttus.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 소액주주 현황을 제공합니다.
     * 
     */
    async mrhlSttus(requestParameters: MrhlSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MrhlSttusResponse> {
        const response = await this.mrhlSttusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 신종자본증권 미상환 잔액을 제공합니다.
     * 
     */
    async newCaplScritsNrdmpBlceRaw(requestParameters: NewCaplScritsNrdmpBlceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewCaplScritsNrdmpBlceResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling newCaplScritsNrdmpBlce.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling newCaplScritsNrdmpBlce.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling newCaplScritsNrdmpBlce.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/newCaplScritsNrdmpBlce.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 신종자본증권 미상환 잔액을 제공합니다.
     * 
     */
    async newCaplScritsNrdmpBlce(requestParameters: NewCaplScritsNrdmpBlceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewCaplScritsNrdmpBlceResponse> {
        const response = await this.newCaplScritsNrdmpBlceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 타법인 출자현황을 제공합니다.
     * 
     */
    async otrCprInvstmntSttusRaw(requestParameters: OtrCprInvstmntSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OtrCprInvstmntSttusResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling otrCprInvstmntSttus.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling otrCprInvstmntSttus.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling otrCprInvstmntSttus.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/otrCprInvstmntSttus.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 타법인 출자현황을 제공합니다.
     * 
     */
    async otrCprInvstmntSttus(requestParameters: OtrCprInvstmntSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OtrCprInvstmntSttusResponse> {
        const response = await this.otrCprInvstmntSttusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 사외이사 및 그 변동현황을 제공합니다.
     * 
     */
    async outcmpnyDrctrNdChangeSttusRaw(requestParameters: OutcmpnyDrctrNdChangeSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OutcmpnyDrctrNdChangeSttusResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling outcmpnyDrctrNdChangeSttus.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling outcmpnyDrctrNdChangeSttus.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling outcmpnyDrctrNdChangeSttus.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/outcmpnyDrctrNdChangeSttus.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 사외이사 및 그 변동현황을 제공합니다.
     * 
     */
    async outcmpnyDrctrNdChangeSttus(requestParameters: OutcmpnyDrctrNdChangeSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OutcmpnyDrctrNdChangeSttusResponse> {
        const response = await this.outcmpnyDrctrNdChangeSttusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 사모자금의 사용내역을 제공합니다.
     * 
     */
    async prvsrpCptalUseDtlsRaw(requestParameters: PrvsrpCptalUseDtlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrvsrpCptalUseDtlsResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling prvsrpCptalUseDtls.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling prvsrpCptalUseDtls.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling prvsrpCptalUseDtls.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/prvsrpCptalUseDtls.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 사모자금의 사용내역을 제공합니다.
     * 
     */
    async prvsrpCptalUseDtls(requestParameters: PrvsrpCptalUseDtlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrvsrpCptalUseDtlsResponse> {
        const response = await this.prvsrpCptalUseDtlsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 공모자금의 사용내역을 제공합니다.
     * 
     */
    async pssrpCptalUseDtlsRaw(requestParameters: PssrpCptalUseDtlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PssrpCptalUseDtlsResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling pssrpCptalUseDtls.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling pssrpCptalUseDtls.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling pssrpCptalUseDtls.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/pssrpCptalUseDtls.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 공모자금의 사용내역을 제공합니다.
     * 
     */
    async pssrpCptalUseDtls(requestParameters: PssrpCptalUseDtlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PssrpCptalUseDtlsResponse> {
        const response = await this.pssrpCptalUseDtlsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 단기사채 미상환 잔액을 제공합니다.
     * 
     */
    async srtpdPsndbtNrdmpBlceRaw(requestParameters: SrtpdPsndbtNrdmpBlceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SrtpdPsndbtNrdmpBlceResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling srtpdPsndbtNrdmpBlce.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling srtpdPsndbtNrdmpBlce.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling srtpdPsndbtNrdmpBlce.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/srtpdPsndbtNrdmpBlce.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 단기사채 미상환 잔액을 제공합니다.
     * 
     */
    async srtpdPsndbtNrdmpBlce(requestParameters: SrtpdPsndbtNrdmpBlceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SrtpdPsndbtNrdmpBlceResponse> {
        const response = await this.srtpdPsndbtNrdmpBlceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 주식의총수현황을 제공합니다.
     * 
     */
    async stockTotqySttusRaw(requestParameters: StockTotqySttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StockTotqySttusResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling stockTotqySttus.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling stockTotqySttus.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling stockTotqySttus.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/stockTotqySttus.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 주식의총수현황을 제공합니다.
     * 
     */
    async stockTotqySttus(requestParameters: StockTotqySttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StockTotqySttusResponse> {
        const response = await this.stockTotqySttusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 자기주식 취득 및 처분 현황을 제공합니다.
     * 
     */
    async tesstkAcqsDspsSttusRaw(requestParameters: TesstkAcqsDspsSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TesstkAcqsDspsSttusResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling tesstkAcqsDspsSttus.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling tesstkAcqsDspsSttus.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling tesstkAcqsDspsSttus.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/tesstkAcqsDspsSttus.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 자기주식 취득 및 처분 현황을 제공합니다.
     * 
     */
    async tesstkAcqsDspsSttus(requestParameters: TesstkAcqsDspsSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TesstkAcqsDspsSttusResponse> {
        const response = await this.tesstkAcqsDspsSttusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 미등기임원 보수현황을 제공합니다.
     * 
     */
    async unrstExctvMendngSttusRaw(requestParameters: UnrstExctvMendngSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnrstExctvMendngSttusResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling unrstExctvMendngSttus.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling unrstExctvMendngSttus.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling unrstExctvMendngSttus.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/unrstExctvMendngSttus.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 정기보고서(사업, 분기, 반기보고서) 내에 미등기임원 보수현황을 제공합니다.
     * 
     */
    async unrstExctvMendngSttus(requestParameters: UnrstExctvMendngSttusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnrstExctvMendngSttusResponse> {
        const response = await this.unrstExctvMendngSttusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type AccnutAdtorNmNdAdtOpinionReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type AccnutAdtorNonAdtServcCnclsSttusReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type AdtServcCnclsSttusReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type AlotMatterReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type CndlCaplScritsNrdmpBlceReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type CprndNrdmpBlceReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type DetScritsIsuAcmsltReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type DrctrAdtAllMendngSttusGmtsckConfmAmountReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type DrctrAdtAllMendngSttusMendngPymntamtTyClReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type EmpSttusReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type EntrprsBilScritsNrdmpBlceReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type ExctvSttusReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type HmvAuditAllSttusReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type HmvAuditIndvdlBySttusReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type HyslrChgSttusReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type HyslrSttusReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type IndvdlByPayReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type IrdsSttusReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type MrhlSttusReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type NewCaplScritsNrdmpBlceReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type OtrCprInvstmntSttusReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type OutcmpnyDrctrNdChangeSttusReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type PrvsrpCptalUseDtlsReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type PssrpCptalUseDtlsReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type SrtpdPsndbtNrdmpBlceReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type StockTotqySttusReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type TesstkAcqsDspsSttusReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type UnrstExctvMendngSttusReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
