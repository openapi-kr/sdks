/* tslint:disable */
/* eslint-disable */
/**
 * DART
 * DART에 공시되고있는 공시보고서 원문 등을 오픈API를 통해 활용할 수 있습니다. 활용을 원하시는 누구든지(개인, 기업, 기관 등) 이용하실 수 있습니다.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opendart@fss.or.kr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EleStockResponse,
  MajorStockResponse,
} from '../models';

export interface ElestockRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
}

export interface MajorstockRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
}

/**
 * 
 */
export class EquityDisclosureApi extends runtime.BaseAPI {

    /**
     * 임원ㆍ주요주주특정증권등 소유상황보고서 내에 임원ㆍ주요주주 소유보고 정보를 제공합니다.
     * 
     */
    async elestockRaw(requestParameters: ElestockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EleStockResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling elestock.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/elestock.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 임원ㆍ주요주주특정증권등 소유상황보고서 내에 임원ㆍ주요주주 소유보고 정보를 제공합니다.
     * 
     */
    async elestock(requestParameters: ElestockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EleStockResponse> {
        const response = await this.elestockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주식등의 대량보유상황보고서 내에 대량보유 상황보고 정보를 제공합니다.
     * 
     */
    async majorstockRaw(requestParameters: MajorstockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MajorStockResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling majorstock.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/majorstock.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주식등의 대량보유상황보고서 내에 대량보유 상황보고 정보를 제공합니다.
     * 
     */
    async majorstock(requestParameters: MajorstockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MajorStockResponse> {
        const response = await this.majorstockRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
