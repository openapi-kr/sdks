/* tslint:disable */
/* eslint-disable */
/**
 * DART
 * DART에 공시되고있는 공시보고서 원문 등을 오픈API를 통해 활용할 수 있습니다. 활용을 원하시는 누구든지(개인, 기업, 기관 등) 이용하실 수 있습니다.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opendart@fss.or.kr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommonError,
  FnlttMultiAcntResponse,
  FnlttSinglAcntAllResponse,
  FnlttSinglAcntResponse,
  XbrlTaxonomyResponse,
} from '../models';

export interface FnlttMultiAcntRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: FnlttMultiAcntReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface FnlttSinglAcntRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: FnlttSinglAcntReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
}

export interface FnlttSinglAcntAllRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 보고서코드
     * - 사업보고서 : 11011
     * - 반기보고서 : 11012
     * - 1분기보고서 : 11013
     * - 3분기보고서 : 11014
     */
    reprtCode: FnlttSinglAcntAllReprtCodeEnum;
    /**
     * 사업연도(4자리) **※ 2015년 이후 부터 정보제공**
     */
    bsnsYear: string;
    /**
     * 개별/연결구분
     * - CFS: 연결재무제표
     * - OFS: 재무제표
     */
    fsDiv: FnlttSinglAcntAllFsDivEnum;
}

export interface FnlttXbrlRequest {
    /**
     * 접수번호 *※ 조회방법 : 공시검색API 호출 > 응답요청 값 rcept_no 추출*
     */
    rceptNo: string;
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
}

export interface XbrlTaxonomyRequest {
    /**
     * | 재무제표구분 | 재무제표명칭 | 개별/연결 | 표시방법 | 세전세후 |
     * | :---: | :---: | :---: | :---: | :---: |
     * | BS1 | 재무상태표 | 연결 | 유동/비유동법 | |
     * | BS2 | 재무상태표 | 개별 | 유동/비유동법 | |
     * | BS3 | 재무상태표 | 연결 | 유동성배열법 | |
     * | BS4 | 재무상태표 | 개별 | 유동성배열법 | |
     * | IS1 | 별개의 손익계산서 | 연결 | 기능별분류 | |
     * | IS2 | 별개의 손익계산서 | 개별 | 기능별분류 | |
     * | IS3 | 별개의 손익계산서 | 연결 | 성격별분류 | |
     * | IS4 | 별개의 손익계산서 | 개별 | 성격별분류 | |
     * | CIS1 | 포괄손익계산서 | 연결 | 세후 | |
     * | CIS2 | 포괄손익계산서 | 개별 | 세후 | |
     * | CIS3 | 포괄손익계산서 | 연결 | 세전 | |
     * | CIS4 | 포괄손익계산서 | 개별 | 세전 | |
     * | DCIS1 | 단일 포괄손익계산서 | 연결 | 기능별분류 | 세후포괄손익 |
     * | DCIS2 | 단일 포괄손익계산서 | 개별 | 기능별분류 | 세후포괄손익 |
     * | DCIS3 | 단일 포괄손익계산서 | 연결 | 기능별분류 | 세전 |
     * | DCIS4 | 단일 포괄손익계산서 | 개별 | 기능별분류 | 세전 |
     * | DCIS5 | 단일 포괄손익계산서 | 연결 | 성격별분류 | 세후포괄손익 |
     * | DCIS6 | 단일 포괄손익계산서 | 개별 | 성격별분류 | 세후포괄손익 |
     * | DCIS7 | 단일 포괄손익계산서 | 연결 | 성격별분류 | 세전 |
     * | DCIS8 | 단일 포괄손익계산서 | 개별 | 성격별분류 | 세전 |
     * | CF1 | 현금흐름표 | 연결 | 직접법 | |
     * | CF2 | 현금흐름표 | 개별 | 직접법 | |
     * | CF3 | 현금흐름표 | 연결 | 간접법 | |
     * | CF4 | 현금흐름표 | 개별 | 간접법 | |
     * | SCE1 | 자본변동표 | 연결 |  | |
     * | SCE2 | 자본변동표 | 개별 |  | |
     */
    sjDiv: XbrlTaxonomySjDivEnum;
}

/**
 * 
 */
export class FinancialApi extends runtime.BaseAPI {

    /**
     * 상장법인(금융업 제외)이 제출한 정기보고서 내에 XBRL재무제표의 주요계정과목(재무상태표, 손익계산서)을 제공합니다. (상장법인 복수조회 가능)
     * 
     */
    async fnlttMultiAcntRaw(requestParameters: FnlttMultiAcntRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FnlttMultiAcntResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling fnlttMultiAcnt.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling fnlttMultiAcnt.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling fnlttMultiAcnt.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/fnlttMultiAcnt.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 상장법인(금융업 제외)이 제출한 정기보고서 내에 XBRL재무제표의 주요계정과목(재무상태표, 손익계산서)을 제공합니다. (상장법인 복수조회 가능)
     * 
     */
    async fnlttMultiAcnt(requestParameters: FnlttMultiAcntRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FnlttMultiAcntResponse> {
        const response = await this.fnlttMultiAcntRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 상장법인(금융업 제외)이 제출한 정기보고서 내에 XBRL재무제표의 주요계정과목(재무상태표, 손익계산서)을 제공합니다.
     * 
     */
    async fnlttSinglAcntRaw(requestParameters: FnlttSinglAcntRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FnlttSinglAcntResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling fnlttSinglAcnt.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling fnlttSinglAcnt.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling fnlttSinglAcnt.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/fnlttSinglAcnt.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 상장법인(금융업 제외)이 제출한 정기보고서 내에 XBRL재무제표의 주요계정과목(재무상태표, 손익계산서)을 제공합니다.
     * 
     */
    async fnlttSinglAcnt(requestParameters: FnlttSinglAcntRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FnlttSinglAcntResponse> {
        const response = await this.fnlttSinglAcntRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 상장법인(금융업 제외)이 제출한 정기보고서 내에 XBRL재무제표의 모든계정과목을 제공합니다.
     * 
     */
    async fnlttSinglAcntAllRaw(requestParameters: FnlttSinglAcntAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FnlttSinglAcntAllResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling fnlttSinglAcntAll.');
        }

        if (requestParameters.reprtCode === null || requestParameters.reprtCode === undefined) {
            throw new runtime.RequiredError('reprtCode','Required parameter requestParameters.reprtCode was null or undefined when calling fnlttSinglAcntAll.');
        }

        if (requestParameters.bsnsYear === null || requestParameters.bsnsYear === undefined) {
            throw new runtime.RequiredError('bsnsYear','Required parameter requestParameters.bsnsYear was null or undefined when calling fnlttSinglAcntAll.');
        }

        if (requestParameters.fsDiv === null || requestParameters.fsDiv === undefined) {
            throw new runtime.RequiredError('fsDiv','Required parameter requestParameters.fsDiv was null or undefined when calling fnlttSinglAcntAll.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.reprtCode !== undefined) {
            queryParameters['reprt_code'] = requestParameters.reprtCode;
        }

        if (requestParameters.bsnsYear !== undefined) {
            queryParameters['bsns_year'] = requestParameters.bsnsYear;
        }

        if (requestParameters.fsDiv !== undefined) {
            queryParameters['fs_div'] = requestParameters.fsDiv;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/fnlttSinglAcntAll.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 상장법인(금융업 제외)이 제출한 정기보고서 내에 XBRL재무제표의 모든계정과목을 제공합니다.
     * 
     */
    async fnlttSinglAcntAll(requestParameters: FnlttSinglAcntAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FnlttSinglAcntAllResponse> {
        const response = await this.fnlttSinglAcntAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 상장법인(금융업 제외)이 제출한 정기보고서 내에 XBRL재무제표를 제공합니다.
     * 
     */
    async fnlttXbrlRaw(requestParameters: FnlttXbrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonError>> {
        if (requestParameters.rceptNo === null || requestParameters.rceptNo === undefined) {
            throw new runtime.RequiredError('rceptNo','Required parameter requestParameters.rceptNo was null or undefined when calling fnlttXbrl.');
        }

        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling fnlttXbrl.');
        }

        const queryParameters: any = {};

        if (requestParameters.rceptNo !== undefined) {
            queryParameters['rcept_no'] = requestParameters.rceptNo;
        }

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/fnlttXbrl.xml`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 상장법인(금융업 제외)이 제출한 정기보고서 내에 XBRL재무제표를 제공합니다.
     * 
     */
    async fnlttXbrl(requestParameters: FnlttXbrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonError> {
        const response = await this.fnlttXbrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 금융감독원 회계포탈에서 제공하는 IFRS 기반 XBRL 재무제표 공시용 표준계정과목체계(계정과목) 을 제공합니다.
     * 
     */
    async xbrlTaxonomyRaw(requestParameters: XbrlTaxonomyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<XbrlTaxonomyResponse>> {
        if (requestParameters.sjDiv === null || requestParameters.sjDiv === undefined) {
            throw new runtime.RequiredError('sjDiv','Required parameter requestParameters.sjDiv was null or undefined when calling xbrlTaxonomy.');
        }

        const queryParameters: any = {};

        if (requestParameters.sjDiv !== undefined) {
            queryParameters['sj_div'] = requestParameters.sjDiv;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/xbrlTaxonomy.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 금융감독원 회계포탈에서 제공하는 IFRS 기반 XBRL 재무제표 공시용 표준계정과목체계(계정과목) 을 제공합니다.
     * 
     */
    async xbrlTaxonomy(requestParameters: XbrlTaxonomyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<XbrlTaxonomyResponse> {
        const response = await this.xbrlTaxonomyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type FnlttMultiAcntReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type FnlttSinglAcntReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 보고서코드
 * - 사업보고서 : 11011
 * - 반기보고서 : 11012
 * - 1분기보고서 : 11013
 * - 3분기보고서 : 11014
 */
export type FnlttSinglAcntAllReprtCodeEnum =
    '11011'|
    '11012'|
    '11013'|
    '11014'
/**
 * 개별/연결구분
 * - CFS: 연결재무제표
 * - OFS: 재무제표
 */
export type FnlttSinglAcntAllFsDivEnum =
    'CFS'|
    'OFS'
/**
 * | 재무제표구분 | 재무제표명칭 | 개별/연결 | 표시방법 | 세전세후 |
 * | :---: | :---: | :---: | :---: | :---: |
 * | BS1 | 재무상태표 | 연결 | 유동/비유동법 | |
 * | BS2 | 재무상태표 | 개별 | 유동/비유동법 | |
 * | BS3 | 재무상태표 | 연결 | 유동성배열법 | |
 * | BS4 | 재무상태표 | 개별 | 유동성배열법 | |
 * | IS1 | 별개의 손익계산서 | 연결 | 기능별분류 | |
 * | IS2 | 별개의 손익계산서 | 개별 | 기능별분류 | |
 * | IS3 | 별개의 손익계산서 | 연결 | 성격별분류 | |
 * | IS4 | 별개의 손익계산서 | 개별 | 성격별분류 | |
 * | CIS1 | 포괄손익계산서 | 연결 | 세후 | |
 * | CIS2 | 포괄손익계산서 | 개별 | 세후 | |
 * | CIS3 | 포괄손익계산서 | 연결 | 세전 | |
 * | CIS4 | 포괄손익계산서 | 개별 | 세전 | |
 * | DCIS1 | 단일 포괄손익계산서 | 연결 | 기능별분류 | 세후포괄손익 |
 * | DCIS2 | 단일 포괄손익계산서 | 개별 | 기능별분류 | 세후포괄손익 |
 * | DCIS3 | 단일 포괄손익계산서 | 연결 | 기능별분류 | 세전 |
 * | DCIS4 | 단일 포괄손익계산서 | 개별 | 기능별분류 | 세전 |
 * | DCIS5 | 단일 포괄손익계산서 | 연결 | 성격별분류 | 세후포괄손익 |
 * | DCIS6 | 단일 포괄손익계산서 | 개별 | 성격별분류 | 세후포괄손익 |
 * | DCIS7 | 단일 포괄손익계산서 | 연결 | 성격별분류 | 세전 |
 * | DCIS8 | 단일 포괄손익계산서 | 개별 | 성격별분류 | 세전 |
 * | CF1 | 현금흐름표 | 연결 | 직접법 | |
 * | CF2 | 현금흐름표 | 개별 | 직접법 | |
 * | CF3 | 현금흐름표 | 연결 | 간접법 | |
 * | CF4 | 현금흐름표 | 개별 | 간접법 | |
 * | SCE1 | 자본변동표 | 연결 |  | |
 * | SCE2 | 자본변동표 | 개별 |  | |
 */
export type XbrlTaxonomySjDivEnum =
    'BS1'|
    'BS2'|
    'BS3'|
    'BS4'|
    'IS1'|
    'IS2'|
    'IS3'|
    'IS4'|
    'CIS1'|
    'CIS2'|
    'CIS3'|
    'CIS4'|
    'DCIS1'|
    'DCIS2'|
    'DCIS3'|
    'DCIS4'|
    'DCIS5'|
    'DCIS6'|
    'DCIS7'|
    'DCIS8'|
    'CF1'|
    'CF2'|
    'CF3'|
    'CF4'|
    'SCE1'|
    'SCE2'
