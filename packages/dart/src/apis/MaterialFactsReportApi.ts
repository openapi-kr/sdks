/* tslint:disable */
/* eslint-disable */
/**
 * DART
 * DART에 공시되고있는 공시보고서 원문 등을 오픈API를 통해 활용할 수 있습니다. 활용을 원하시는 누구든지(개인, 기업, 기관 등) 이용하실 수 있습니다.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opendart@fss.or.kr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AstInhtrfEtcPtbkOptResponse,
  BdwtIsDecsnResponse,
  BnkMngtPcbgResponse,
  BnkMngtPcspResponse,
  BsnInhDecsnResponse,
  BsnSpResponse,
  BsnTrfDecsnResponse,
  CmpDvDecsnResponse,
  CmpDvmgDecsnResponse,
  CmpMgDecsnResponse,
  CrDecsnResponse,
  CtrcvsBgrqResponse,
  CvbdIsDecsnResponse,
  DfOcrResponse,
  DsRsOcrResponse,
  ExbdIsDecsnResponse,
  FricDecsnResponse,
  LwstLgResponse,
  OtcprStkInvscrInhDecsnResponse,
  OtcprStkInvscrTrfDecsnResponse,
  OvDlstDecsnResponse,
  OvDlstResponse,
  OvLstDecsnResponse,
  OvLstResponse,
  PifricDecsnResponse,
  PiicDecsnResponse,
  StkExtrDecsnResponse,
  StkrtbdInhDecsnResponse,
  StkrtbdTrfDecsnResponse,
  TgastInhDecsnResponse,
  TgastTrfDecsnResponse,
  TsstkAqDecsnResponse,
  TsstkAqTrctrCcDecsnResponse,
  TsstkAqTrctrCnsDecsnResponse,
  TsstkDpDecsnResponse,
  WdCocobdIsDecsnResponse,
} from '../models';

export interface ApiOvDlstJsonGetRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface AstInhtrfEtcPtbkOptRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface BdwtIsDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface BnkMngtPcbgRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface BnkMngtPcspRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface BsnInhDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface BsnSpRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface BsnTrfDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface CmpDvDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface CmpDvmgDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface CmpMgDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface CrDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface CtrcvsBgrqRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface CvbdIsDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface DfOcrRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface DsRsOcrRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface ExbdIsDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface FricDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface LwstLgRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface OtcprStkInvscrInhDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface OtcprStkInvscrTrfDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface OvDlstDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface OvLstRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface OvLstDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface PifricDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface PiicDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface StkExtrDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface StkrtbdInhDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface StkrtbdTrfDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface TgastInhDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface TgastTrfDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface TsstkAqDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface TsstkAqTrctrCcDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface TsstkAqTrctrCnsDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface TsstkDpDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

export interface WdCocobdIsDecsnRequest {
    /**
     * 공시대상회사의 고유번호(8자리)
     * **※ 개발가이드 > 공시정보 > 고유번호 참고**
     */
    corpCode: string;
    /**
     * 검색시작 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    bgnDe: string;
    /**
     * 검색종료 접수일자(YYYYMMDD) **※ 2015년 이후 부터 정보제공**
     */
    endDe: string;
}

/**
 * 
 */
export class MaterialFactsReportApi extends runtime.BaseAPI {

    /**
     * 주요사항보고서(해외 증권시장 주권등 상장폐지) 내에 주요 정보를 제공합니다.
     * 
     */
    async apiOvDlstJsonGetRaw(requestParameters: ApiOvDlstJsonGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OvDlstResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling apiOvDlstJsonGet.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling apiOvDlstJsonGet.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling apiOvDlstJsonGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/ovDlst.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(해외 증권시장 주권등 상장폐지) 내에 주요 정보를 제공합니다.
     * 
     */
    async apiOvDlstJsonGet(requestParameters: ApiOvDlstJsonGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OvDlstResponse> {
        const response = await this.apiOvDlstJsonGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(자산양수도(기타), 풋백옵션) 내에 주요 정보를 제공합니다.
     * 
     */
    async astInhtrfEtcPtbkOptRaw(requestParameters: AstInhtrfEtcPtbkOptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AstInhtrfEtcPtbkOptResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling astInhtrfEtcPtbkOpt.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling astInhtrfEtcPtbkOpt.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling astInhtrfEtcPtbkOpt.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/astInhtrfEtcPtbkOpt.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(자산양수도(기타), 풋백옵션) 내에 주요 정보를 제공합니다.
     * 
     */
    async astInhtrfEtcPtbkOpt(requestParameters: AstInhtrfEtcPtbkOptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AstInhtrfEtcPtbkOptResponse> {
        const response = await this.astInhtrfEtcPtbkOptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(신주인수권부사채권 발행결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async bdwtIsDecsnRaw(requestParameters: BdwtIsDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BdwtIsDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling bdwtIsDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling bdwtIsDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling bdwtIsDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/bdwtIsDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(신주인수권부사채권 발행결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async bdwtIsDecsn(requestParameters: BdwtIsDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BdwtIsDecsnResponse> {
        const response = await this.bdwtIsDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(채권은행 등의 관리절차 개시) 내에 주요 정보를 제공합니다.
     * 
     */
    async bnkMngtPcbgRaw(requestParameters: BnkMngtPcbgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BnkMngtPcbgResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling bnkMngtPcbg.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling bnkMngtPcbg.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling bnkMngtPcbg.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/bnkMngtPcbg.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(채권은행 등의 관리절차 개시) 내에 주요 정보를 제공합니다.
     * 
     */
    async bnkMngtPcbg(requestParameters: BnkMngtPcbgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BnkMngtPcbgResponse> {
        const response = await this.bnkMngtPcbgRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(채권은행 등의 관리절차 중단) 내에 주요 정보를 제공합니다.
     * 
     */
    async bnkMngtPcspRaw(requestParameters: BnkMngtPcspRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BnkMngtPcspResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling bnkMngtPcsp.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling bnkMngtPcsp.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling bnkMngtPcsp.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/bnkMngtPcsp.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(채권은행 등의 관리절차 중단) 내에 주요 정보를 제공합니다.
     * 
     */
    async bnkMngtPcsp(requestParameters: BnkMngtPcspRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BnkMngtPcspResponse> {
        const response = await this.bnkMngtPcspRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(영업양수 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async bsnInhDecsnRaw(requestParameters: BsnInhDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BsnInhDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling bsnInhDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling bsnInhDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling bsnInhDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/bsnInhDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(영업양수 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async bsnInhDecsn(requestParameters: BsnInhDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BsnInhDecsnResponse> {
        const response = await this.bsnInhDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(영업정지) 내에 주요 정보를 제공합니다.
     * 
     */
    async bsnSpRaw(requestParameters: BsnSpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BsnSpResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling bsnSp.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling bsnSp.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling bsnSp.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/bsnSp.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(영업정지) 내에 주요 정보를 제공합니다.
     * 
     */
    async bsnSp(requestParameters: BsnSpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BsnSpResponse> {
        const response = await this.bsnSpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(영업양도 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async bsnTrfDecsnRaw(requestParameters: BsnTrfDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BsnTrfDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling bsnTrfDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling bsnTrfDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling bsnTrfDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/bsnTrfDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(영업양도 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async bsnTrfDecsn(requestParameters: BsnTrfDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BsnTrfDecsnResponse> {
        const response = await this.bsnTrfDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(회사분할 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async cmpDvDecsnRaw(requestParameters: CmpDvDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CmpDvDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling cmpDvDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling cmpDvDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling cmpDvDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/cmpDvDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(회사분할 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async cmpDvDecsn(requestParameters: CmpDvDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CmpDvDecsnResponse> {
        const response = await this.cmpDvDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(회사분할합병 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async cmpDvmgDecsnRaw(requestParameters: CmpDvmgDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CmpDvmgDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling cmpDvmgDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling cmpDvmgDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling cmpDvmgDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/cmpDvmgDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(회사분할합병 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async cmpDvmgDecsn(requestParameters: CmpDvmgDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CmpDvmgDecsnResponse> {
        const response = await this.cmpDvmgDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(회사합병 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async cmpMgDecsnRaw(requestParameters: CmpMgDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CmpMgDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling cmpMgDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling cmpMgDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling cmpMgDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/cmpMgDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(회사합병 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async cmpMgDecsn(requestParameters: CmpMgDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CmpMgDecsnResponse> {
        const response = await this.cmpMgDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(감자 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async crDecsnRaw(requestParameters: CrDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CrDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling crDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling crDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling crDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/crDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(감자 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async crDecsn(requestParameters: CrDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CrDecsnResponse> {
        const response = await this.crDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(회생절차 개시신청) 내에 주요 정보를 제공합니다.
     * 
     */
    async ctrcvsBgrqRaw(requestParameters: CtrcvsBgrqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CtrcvsBgrqResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling ctrcvsBgrq.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling ctrcvsBgrq.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling ctrcvsBgrq.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/ctrcvsBgrq.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(회생절차 개시신청) 내에 주요 정보를 제공합니다.
     * 
     */
    async ctrcvsBgrq(requestParameters: CtrcvsBgrqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CtrcvsBgrqResponse> {
        const response = await this.ctrcvsBgrqRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(전환사채권 발행결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async cvbdIsDecsnRaw(requestParameters: CvbdIsDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CvbdIsDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling cvbdIsDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling cvbdIsDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling cvbdIsDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/cvbdIsDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(전환사채권 발행결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async cvbdIsDecsn(requestParameters: CvbdIsDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CvbdIsDecsnResponse> {
        const response = await this.cvbdIsDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(부도발생) 내에 주요 정보를 제공합니다.
     * 
     */
    async dfOcrRaw(requestParameters: DfOcrRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DfOcrResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling dfOcr.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling dfOcr.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling dfOcr.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/dfOcr.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(부도발생) 내에 주요 정보를 제공합니다.
     * 
     */
    async dfOcr(requestParameters: DfOcrRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DfOcrResponse> {
        const response = await this.dfOcrRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(해산사유 발생) 내에 주요 정보를 제공합니다.
     * 
     */
    async dsRsOcrRaw(requestParameters: DsRsOcrRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DsRsOcrResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling dsRsOcr.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling dsRsOcr.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling dsRsOcr.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/dsRsOcr.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(해산사유 발생) 내에 주요 정보를 제공합니다.
     * 
     */
    async dsRsOcr(requestParameters: DsRsOcrRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DsRsOcrResponse> {
        const response = await this.dsRsOcrRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(교환사채권 발행결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async exbdIsDecsnRaw(requestParameters: ExbdIsDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExbdIsDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling exbdIsDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling exbdIsDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling exbdIsDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/exbdIsDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(교환사채권 발행결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async exbdIsDecsn(requestParameters: ExbdIsDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExbdIsDecsnResponse> {
        const response = await this.exbdIsDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(무상증자 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async fricDecsnRaw(requestParameters: FricDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FricDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling fricDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling fricDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling fricDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/fricDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(무상증자 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async fricDecsn(requestParameters: FricDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FricDecsnResponse> {
        const response = await this.fricDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(소송 등의 제기) 내에 주요 정보를 제공합니다.
     * 
     */
    async lwstLgRaw(requestParameters: LwstLgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LwstLgResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling lwstLg.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling lwstLg.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling lwstLg.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/lwstLg.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(소송 등의 제기) 내에 주요 정보를 제공합니다.
     * 
     */
    async lwstLg(requestParameters: LwstLgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LwstLgResponse> {
        const response = await this.lwstLgRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(타법인 주식 및 출자증권 양수결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async otcprStkInvscrInhDecsnRaw(requestParameters: OtcprStkInvscrInhDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OtcprStkInvscrInhDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling otcprStkInvscrInhDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling otcprStkInvscrInhDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling otcprStkInvscrInhDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/otcprStkInvscrInhDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(타법인 주식 및 출자증권 양수결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async otcprStkInvscrInhDecsn(requestParameters: OtcprStkInvscrInhDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OtcprStkInvscrInhDecsnResponse> {
        const response = await this.otcprStkInvscrInhDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(타법인 주식 및 출자증권 양도결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async otcprStkInvscrTrfDecsnRaw(requestParameters: OtcprStkInvscrTrfDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OtcprStkInvscrTrfDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling otcprStkInvscrTrfDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling otcprStkInvscrTrfDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling otcprStkInvscrTrfDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/otcprStkInvscrTrfDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(타법인 주식 및 출자증권 양도결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async otcprStkInvscrTrfDecsn(requestParameters: OtcprStkInvscrTrfDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OtcprStkInvscrTrfDecsnResponse> {
        const response = await this.otcprStkInvscrTrfDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(해외 증권시장 주권등 상장폐지 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async ovDlstDecsnRaw(requestParameters: OvDlstDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OvDlstDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling ovDlstDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling ovDlstDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling ovDlstDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/ovDlstDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(해외 증권시장 주권등 상장폐지 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async ovDlstDecsn(requestParameters: OvDlstDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OvDlstDecsnResponse> {
        const response = await this.ovDlstDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(해외 증권시장 주권등 상장) 내에 주요 정보를 제공합니다.
     * 
     */
    async ovLstRaw(requestParameters: OvLstRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OvLstResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling ovLst.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling ovLst.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling ovLst.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/ovLst.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(해외 증권시장 주권등 상장) 내에 주요 정보를 제공합니다.
     * 
     */
    async ovLst(requestParameters: OvLstRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OvLstResponse> {
        const response = await this.ovLstRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(해외 증권시장 주권등 상장 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async ovLstDecsnRaw(requestParameters: OvLstDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OvLstDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling ovLstDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling ovLstDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling ovLstDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/ovLstDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(해외 증권시장 주권등 상장 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async ovLstDecsn(requestParameters: OvLstDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OvLstDecsnResponse> {
        const response = await this.ovLstDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(유무상증자 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async pifricDecsnRaw(requestParameters: PifricDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PifricDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling pifricDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling pifricDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling pifricDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/pifricDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(유무상증자 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async pifricDecsn(requestParameters: PifricDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PifricDecsnResponse> {
        const response = await this.pifricDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(유상증자 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async piicDecsnRaw(requestParameters: PiicDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PiicDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling piicDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling piicDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling piicDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/piicDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(유상증자 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async piicDecsn(requestParameters: PiicDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PiicDecsnResponse> {
        const response = await this.piicDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(주식교환·이전 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async stkExtrDecsnRaw(requestParameters: StkExtrDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StkExtrDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling stkExtrDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling stkExtrDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling stkExtrDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/stkExtrDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(주식교환·이전 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async stkExtrDecsn(requestParameters: StkExtrDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StkExtrDecsnResponse> {
        const response = await this.stkExtrDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(주권 관련 사채권 양수 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async stkrtbdInhDecsnRaw(requestParameters: StkrtbdInhDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StkrtbdInhDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling stkrtbdInhDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling stkrtbdInhDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling stkrtbdInhDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/stkrtbdInhDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(주권 관련 사채권 양수 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async stkrtbdInhDecsn(requestParameters: StkrtbdInhDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StkrtbdInhDecsnResponse> {
        const response = await this.stkrtbdInhDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(주권 관련 사채권 양도 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async stkrtbdTrfDecsnRaw(requestParameters: StkrtbdTrfDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StkrtbdTrfDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling stkrtbdTrfDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling stkrtbdTrfDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling stkrtbdTrfDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/stkrtbdTrfDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(주권 관련 사채권 양도 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async stkrtbdTrfDecsn(requestParameters: StkrtbdTrfDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StkrtbdTrfDecsnResponse> {
        const response = await this.stkrtbdTrfDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(유형자산 양수 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async tgastInhDecsnRaw(requestParameters: TgastInhDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TgastInhDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling tgastInhDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling tgastInhDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling tgastInhDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/tgastInhDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(유형자산 양수 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async tgastInhDecsn(requestParameters: TgastInhDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TgastInhDecsnResponse> {
        const response = await this.tgastInhDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(유형자산 양도 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async tgastTrfDecsnRaw(requestParameters: TgastTrfDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TgastTrfDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling tgastTrfDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling tgastTrfDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling tgastTrfDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/tgastTrfDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(유형자산 양도 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async tgastTrfDecsn(requestParameters: TgastTrfDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TgastTrfDecsnResponse> {
        const response = await this.tgastTrfDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(자기주식 취득 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async tsstkAqDecsnRaw(requestParameters: TsstkAqDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TsstkAqDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling tsstkAqDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling tsstkAqDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling tsstkAqDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/tsstkAqDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(자기주식 취득 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async tsstkAqDecsn(requestParameters: TsstkAqDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TsstkAqDecsnResponse> {
        const response = await this.tsstkAqDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(자기주식취득 신탁계약 해지 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async tsstkAqTrctrCcDecsnRaw(requestParameters: TsstkAqTrctrCcDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TsstkAqTrctrCcDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling tsstkAqTrctrCcDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling tsstkAqTrctrCcDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling tsstkAqTrctrCcDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/tsstkAqTrctrCcDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(자기주식취득 신탁계약 해지 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async tsstkAqTrctrCcDecsn(requestParameters: TsstkAqTrctrCcDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TsstkAqTrctrCcDecsnResponse> {
        const response = await this.tsstkAqTrctrCcDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(자기주식취득 신탁계약 체결 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async tsstkAqTrctrCnsDecsnRaw(requestParameters: TsstkAqTrctrCnsDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TsstkAqTrctrCnsDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling tsstkAqTrctrCnsDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling tsstkAqTrctrCnsDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling tsstkAqTrctrCnsDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/tsstkAqTrctrCnsDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(자기주식취득 신탁계약 체결 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async tsstkAqTrctrCnsDecsn(requestParameters: TsstkAqTrctrCnsDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TsstkAqTrctrCnsDecsnResponse> {
        const response = await this.tsstkAqTrctrCnsDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(자기주식 처분 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async tsstkDpDecsnRaw(requestParameters: TsstkDpDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TsstkDpDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling tsstkDpDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling tsstkDpDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling tsstkDpDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/tsstkDpDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(자기주식 처분 결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async tsstkDpDecsn(requestParameters: TsstkDpDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TsstkDpDecsnResponse> {
        const response = await this.tsstkDpDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주요사항보고서(상각형 조건부자본증권 발행결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async wdCocobdIsDecsnRaw(requestParameters: WdCocobdIsDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WdCocobdIsDecsnResponse>> {
        if (requestParameters.corpCode === null || requestParameters.corpCode === undefined) {
            throw new runtime.RequiredError('corpCode','Required parameter requestParameters.corpCode was null or undefined when calling wdCocobdIsDecsn.');
        }

        if (requestParameters.bgnDe === null || requestParameters.bgnDe === undefined) {
            throw new runtime.RequiredError('bgnDe','Required parameter requestParameters.bgnDe was null or undefined when calling wdCocobdIsDecsn.');
        }

        if (requestParameters.endDe === null || requestParameters.endDe === undefined) {
            throw new runtime.RequiredError('endDe','Required parameter requestParameters.endDe was null or undefined when calling wdCocobdIsDecsn.');
        }

        const queryParameters: any = {};

        if (requestParameters.corpCode !== undefined) {
            queryParameters['corp_code'] = requestParameters.corpCode;
        }

        if (requestParameters.bgnDe !== undefined) {
            queryParameters['bgn_de'] = requestParameters.bgnDe;
        }

        if (requestParameters.endDe !== undefined) {
            queryParameters['end_de'] = requestParameters.endDe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["crtfc_key"] = this.configuration.apiKey("crtfc_key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/wdCocobdIsDecsn.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 주요사항보고서(상각형 조건부자본증권 발행결정) 내에 주요 정보를 제공합니다.
     * 
     */
    async wdCocobdIsDecsn(requestParameters: WdCocobdIsDecsnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WdCocobdIsDecsnResponse> {
        const response = await this.wdCocobdIsDecsnRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
