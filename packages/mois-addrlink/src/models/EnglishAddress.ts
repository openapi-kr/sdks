/* tslint:disable */
/* eslint-disable */
/**
 * 주소기반산업서비스
 * 행정안전부  [주소기반산업서비스](https://business.juso.go.kr/addrlink/main.do) 에서 제공하는 도로명주소 Open API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EnglishAddress
 */
export interface EnglishAddress {
    /**
     * 영문 도로명주소
     * @type {string}
     * @memberof EnglishAddress
     */
    roadAddr: string;
    /**
     * 영문 지번주소
     * @type {string}
     * @memberof EnglishAddress
     */
    jiBunAddr: string;
    /**
     * 우편번호
     * @type {string}
     * @memberof EnglishAddress
     */
    zipNo: string;
    /**
     * 행정구역코드
     * @type {string}
     * @memberof EnglishAddress
     */
    admCd: string;
    /**
     * 도로명코드
     * @type {string}
     * @memberof EnglishAddress
     */
    rnMgtSn: string;
    /**
     * 공동주택여부
     * * `1` : 공동주택
     * * `0` : 비공동주택
     * @type {string}
     * @memberof EnglishAddress
     */
    bdKdcd: EnglishAddressBdKdcdEnum;
    /**
     * 영문 시도명
     * @type {string}
     * @memberof EnglishAddress
     */
    siNm: string;
    /**
     * 영문 시군구명
     * @type {string}
     * @memberof EnglishAddress
     */
    sggNm: string;
    /**
     * 영문 읍면동명
     * @type {string}
     * @memberof EnglishAddress
     */
    emdNm: string;
    /**
     * 영문 법정리명
     * @type {string}
     * @memberof EnglishAddress
     */
    liNm?: string;
    /**
     * 영문 도로명
     * @type {string}
     * @memberof EnglishAddress
     */
    rn: string;
    /**
     * 지하여부
     * * `0` : 지상
     * * `1` : 지하
     * @type {string}
     * @memberof EnglishAddress
     */
    udrtYn: EnglishAddressUdrtYnEnum;
    /**
     * 건물본번
     * @type {string}
     * @memberof EnglishAddress
     */
    buldMnnm: string;
    /**
     * 건물부번
     * @type {string}
     * @memberof EnglishAddress
     */
    buldSlno: string;
    /**
     * 산여부
     * * `0` : 대지
     * * `1` : 산
     * @type {string}
     * @memberof EnglishAddress
     */
    mtYn: EnglishAddressMtYnEnum;
    /**
     * 지번본번(번지)
     * @type {string}
     * @memberof EnglishAddress
     */
    lnbrMnnm: string;
    /**
     * 지번부번(호)
     * @type {string}
     * @memberof EnglishAddress
     */
    lnbrSlno: string;
    /**
     * 도로명주소(한글)
     * @type {string}
     * @memberof EnglishAddress
     */
    korAddr: string;
}

/**
 * 공동주택여부
 * * `1` : 공동주택
 * * `0` : 비공동주택
 */
export type EnglishAddressBdKdcdEnum =
    '1'|
    '0'

const EnglishAddressBdKdcdEnumValues = [
    '1',
    '0',
]

export function isEnglishAddressBdKdcdEnum(value: any): value is EnglishAddressBdKdcdEnum {
    return EnglishAddressBdKdcdEnumValues.indexOf(value as unknown as EnglishAddressBdKdcdEnum) !== -1
}

/**
 * 지하여부
 * * `0` : 지상
 * * `1` : 지하
 */
export type EnglishAddressUdrtYnEnum =
    '0'|
    '1'

const EnglishAddressUdrtYnEnumValues = [
    '0',
    '1',
]

export function isEnglishAddressUdrtYnEnum(value: any): value is EnglishAddressUdrtYnEnum {
    return EnglishAddressUdrtYnEnumValues.indexOf(value as unknown as EnglishAddressUdrtYnEnum) !== -1
}

/**
 * 산여부
 * * `0` : 대지
 * * `1` : 산
 */
export type EnglishAddressMtYnEnum =
    '0'|
    '1'

const EnglishAddressMtYnEnumValues = [
    '0',
    '1',
]

export function isEnglishAddressMtYnEnum(value: any): value is EnglishAddressMtYnEnum {
    return EnglishAddressMtYnEnumValues.indexOf(value as unknown as EnglishAddressMtYnEnum) !== -1
}



/**
 * Check if a given object implements the EnglishAddress interface.
 */
export function instanceOfEnglishAddress(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "roadAddr" in value;
    isInstance = isInstance && "jiBunAddr" in value;
    isInstance = isInstance && "zipNo" in value;
    isInstance = isInstance && "admCd" in value;
    isInstance = isInstance && "rnMgtSn" in value;
    isInstance = isInstance && "bdKdcd" in value;
    isInstance = isInstance && "siNm" in value;
    isInstance = isInstance && "sggNm" in value;
    isInstance = isInstance && "emdNm" in value;
    isInstance = isInstance && "rn" in value;
    isInstance = isInstance && "udrtYn" in value;
    isInstance = isInstance && "buldMnnm" in value;
    isInstance = isInstance && "buldSlno" in value;
    isInstance = isInstance && "mtYn" in value;
    isInstance = isInstance && "lnbrMnnm" in value;
    isInstance = isInstance && "lnbrSlno" in value;
    isInstance = isInstance && "korAddr" in value;

    return isInstance;
}

export function EnglishAddressFromJSON(json: any): EnglishAddress {
    return EnglishAddressFromJSONTyped(json, false);
}

export function EnglishAddressFromJSONTyped(json: any, ignoreDiscriminator: boolean): EnglishAddress {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!exists(json, 'bdKdcd')) {
        return json;
    }
    if (
        !isEnglishAddressBdKdcdEnum(json['bdKdcd'])
        && json['bdKdcd'] !== undefined
    ) {
        return json;
    }
    if (!exists(json, 'udrtYn')) {
        return json;
    }
    if (
        !isEnglishAddressUdrtYnEnum(json['udrtYn'])
        && json['udrtYn'] !== undefined
    ) {
        return json;
    }
    if (!exists(json, 'mtYn')) {
        return json;
    }
    if (
        !isEnglishAddressMtYnEnum(json['mtYn'])
        && json['mtYn'] !== undefined
    ) {
        return json;
    }
    return {
        
        'roadAddr': json['roadAddr'],
        'jiBunAddr': json['jiBunAddr'],
        'zipNo': json['zipNo'],
        'admCd': json['admCd'],
        'rnMgtSn': json['rnMgtSn'],
        'bdKdcd': json['bdKdcd'],
        'siNm': json['siNm'],
        'sggNm': json['sggNm'],
        'emdNm': json['emdNm'],
        'liNm': !exists(json, 'liNm') ? undefined : json['liNm'],
        'rn': json['rn'],
        'udrtYn': json['udrtYn'],
        'buldMnnm': json['buldMnnm'],
        'buldSlno': json['buldSlno'],
        'mtYn': json['mtYn'],
        'lnbrMnnm': json['lnbrMnnm'],
        'lnbrSlno': json['lnbrSlno'],
        'korAddr': json['korAddr'],
    };
}

export function EnglishAddressToJSON(value?: EnglishAddress | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'roadAddr': value.roadAddr,
        'jiBunAddr': value.jiBunAddr,
        'zipNo': value.zipNo,
        'admCd': value.admCd,
        'rnMgtSn': value.rnMgtSn,
        'bdKdcd': value.bdKdcd,
        'siNm': value.siNm,
        'sggNm': value.sggNm,
        'emdNm': value.emdNm,
        'liNm': value.liNm,
        'rn': value.rn,
        'udrtYn': value.udrtYn,
        'buldMnnm': value.buldMnnm,
        'buldSlno': value.buldSlno,
        'mtYn': value.mtYn,
        'lnbrMnnm': value.lnbrMnnm,
        'lnbrSlno': value.lnbrSlno,
        'korAddr': value.korAddr,
    };
}

