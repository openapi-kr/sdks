/* tslint:disable */
/* eslint-disable */
/**
 * 주소기반산업서비스
 * 행정안전부  [주소기반산업서비스](https://business.juso.go.kr/addrlink/main.do) 에서 제공하는 도로명주소 Open API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Common
 */
export interface Common {
    /**
     * 총 검색 데이터수
     * @type {string}
     * @memberof Common
     */
    totalCount: string;
    /**
     * 페이지 번호
     * @type {string}
     * @memberof Common
     */
    currentPage: string;
    /**
     * 페이지당 출력할 결과 Row 수
     * @type {string}
     * @memberof Common
     */
    countPerPage: string;
    /**
     * 에러 코드
     * @type {string}
     * @memberof Common
     */
    errorCode: CommonErrorCodeEnum;
    /**
     * 에러 메시지
     * @type {string}
     * @memberof Common
     */
    errorMessage: string;
}

/**
 * 에러 코드
 */
export type CommonErrorCodeEnum =
    '0'|
    '400'|
    '-999'|
    'E0001'|
    'E0005'|
    'E0006'|
    'E0008'|
    'E0009'|
    'E0010'|
    'E0011'|
    'E0012'|
    'E0013'|
    'E0014'|
    'E0015'

const CommonErrorCodeEnumValues = [
    '0',
    '400',
    '-999',
    'E0001',
    'E0005',
    'E0006',
    'E0008',
    'E0009',
    'E0010',
    'E0011',
    'E0012',
    'E0013',
    'E0014',
    'E0015',
]

export function isCommonErrorCodeEnum(value: any): value is CommonErrorCodeEnum {
    return CommonErrorCodeEnumValues.indexOf(value as unknown as CommonErrorCodeEnum) !== -1
}



/**
 * Check if a given object implements the Common interface.
 */
export function instanceOfCommon(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "totalCount" in value;
    isInstance = isInstance && "currentPage" in value;
    isInstance = isInstance && "countPerPage" in value;
    isInstance = isInstance && "errorCode" in value;
    isInstance = isInstance && "errorMessage" in value;

    return isInstance;
}

export function CommonFromJSON(json: any): Common {
    return CommonFromJSONTyped(json, false);
}

export function CommonFromJSONTyped(json: any, ignoreDiscriminator: boolean): Common {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!exists(json, 'errorCode')) {
        return json;
    }
    if (
        !isCommonErrorCodeEnum(json['errorCode'])
        && json['errorCode'] !== undefined
    ) {
        return json;
    }
    return {
        
        'totalCount': json['totalCount'],
        'currentPage': json['currentPage'],
        'countPerPage': json['countPerPage'],
        'errorCode': json['errorCode'],
        'errorMessage': json['errorMessage'],
    };
}

export function CommonToJSON(value?: Common | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'totalCount': value.totalCount,
        'currentPage': value.currentPage,
        'countPerPage': value.countPerPage,
        'errorCode': value.errorCode,
        'errorMessage': value.errorMessage,
    };
}

