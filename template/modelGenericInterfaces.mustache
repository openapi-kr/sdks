/**
 * {{#lambda.indented_star_1}}{{{unescapedDescription}}}{{/lambda.indented_star_1}}
 * @export
 * @interface {{classname}}
 */
export interface {{classname}} {{#parent}}extends {{{.}}} {{/parent}}{
{{#additionalPropertiesType}}
    [key: string]: {{{additionalPropertiesType}}}{{#hasVars}} | any{{/hasVars}};
{{/additionalPropertiesType}}
{{#vars}}
    /**
     * {{#lambda.indented_star_4}}{{{unescapedDescription}}}{{/lambda.indented_star_4}}
     * @type {{=<% %>=}}{<%&datatype%>}<%={{ }}=%>
     * @memberof {{classname}}
    {{#deprecated}}
     * @deprecated
    {{/deprecated}}
     */
    {{#isReadOnly}}readonly {{/isReadOnly}}{{name}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};
{{/vars}}
}{{#hasEnums}}

{{#vars}}
{{#isEnum}}
/**
 * {{#lambda.indented_star_1}}{{{unescapedDescription}}}{{/lambda.indented_star_1}}
 */
export type {{classname}}{{enumName}} =
{{#allowableValues}}
    {{#enumVars}}
    {{{value}}}{{^-last}}|{{/-last}}
    {{/enumVars}}
{{/allowableValues}}

const {{classname}}{{enumName}}Values = [
{{#allowableValues}}
    {{#enumVars}}
    {{{value}}},
    {{/enumVars}}
{{/allowableValues}}
]

export function is{{classname}}{{enumName}}(value: any): value is {{classname}}{{enumName}} {
    return {{classname}}{{enumName}}Values.indexOf(value as unknown as {{classname}}{{enumName}}) !== -1
}

{{/isEnum}}{{/vars}}{{/hasEnums}}